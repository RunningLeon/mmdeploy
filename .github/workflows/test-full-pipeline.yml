name: test-full-pipeline

on:
  push:
    paths-ignore:
      - "docs/**"

  pull_request:
    paths-ignore:
      - "docs/**"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test_full_pipeline:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        python-version: [3.7]
        torch: [1.9.0]
        include:
          - torch: 1.9.0
            torch_version: torch1.9
            torchvision: 0.10.0
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install PyTorch
        run: pip install torch==${{matrix.torch}}+cpu torchvision==${{matrix.torchvision}}+cpu -f https://download.pytorch.org/whl/torch_stable.html
      - name: install libs
        run: |
          sudo apt update
          sudo apt install gcc-multilib g++-multilib wget libprotobuf-dev protobuf-compiler libopencv-dev
      - name: Install mmcls
        run: |
          pip install mmcv-full==${{matrix.mmcv}} -f https://download.openmmlab.com/mmcv/dist/cpu/${{matrix.torch_version}}/index.html
          python -c 'import mmcv; print(mmcv.__version__)'
          mmcls_version=0.22.1
          pip install mmcls==$mmcls_version
          git clone  --depth 1 --single-branch --branch $mmcls_version https://github.com/open-mmlab/mmclassification.git ../mmclassification
          python -c 'import mmcv; print(mmcv.__version__)'
      - name: Install mmdeploy dependencies
        run: |
          pip install cmake onnx
          pip install -r requirements/build.txt
          pip install -r requirements/runtime.txt
          pip install -r requirements/tests.txt
      - name: Install mmdeploy with onnxruntime backend
        run: |
          pip install onnxruntime==1.8.1
          wget https://github.com/microsoft/onnxruntime/releases/download/v1.8.1/onnxruntime-linux-x64-1.8.1.tgz
          tar -zxvf onnxruntime-linux-x64-1.8.1.tgz
          export MMDEPLOY_DIR=$(pwd)
          export ONNXRUNTIME_DIR=$MMDEPLOY_DIR/onnxruntime-linux-x64-1.8.1
          export LD_LIBRARY_PATH=$ONNXRUNTIME_DIR/lib:$LD_LIBRARY_PATH
          echo $ONNXRUNTIME_DIR
          echo $LD_LIBRARY_PATH
          mkdir -p build && pushd build
          cmake -DCMAKE_CXX_COMPILER=g++-7 \
                -DMMDEPLOY_TARGET_BACKENDS=ort \
                -DMMDEPLOY_TARGET_DEVICES=cpu \
                -DMMDEPLOY_BUILD_EXAMPLES=ON \
                -DMMDEPLOY_BUILD_SDK=ON \
                -DMMDEPLOY_CODEBASES=mmcls \
                -DMMDEPLOY_BUILD_SDK_PYTHON_API=ON \
                -DONNXRUNTIME_DIR=${ONNXRUNTIME_DIR} ..

          make -j8 && make install
          popd
          pip install -v -e .
      - name: Test mmcls full pipeline
        run: |
          export MMDEPLOY_DIR=$(pwd)
          export ONNXRUNTIME_DIR=$MMDEPLOY_DIR/onnxruntime-linux-x64-1.8.1
          export LD_LIBRARY_PATH=$ONNXRUNTIME_DIR/lib:$MMDEPLOY_DIR/build/install/lib:$LD_LIBRARY_PATH
          bash .github/scripts/test_mmcls_full_pipeline.sh

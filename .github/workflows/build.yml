name: build

on: [push, pull_request]

permissions:
  contents: write
  pull-requests: write

jobs:
#  build_cpu_model_convert:
#    runs-on: ubuntu-18.04
#    strategy:
#      matrix:
#        python-version: [3.7]
#        torch: [1.8.0, 1.9.0]
#        mmcv: [1.4.2]
#        include:
#          - torch: 1.8.0
#            torch_version: torch1.8
#            torchvision: 0.9.0
#          - torch: 1.9.0
#            torch_version: torch1.9
#            torchvision: 0.10.0
#    steps:
#      - uses: actions/checkout@v2
#      - name: Set up Python ${{ matrix.python-version }}
#        uses: actions/setup-python@v2
#        with:
#          python-version: ${{ matrix.python-version }}
#      - name: Install PyTorch
#        run: pip install torch==${{matrix.torch}}+cpu torchvision==${{matrix.torchvision}}+cpu -f https://download.pytorch.org/whl/torch_stable.html
#      - name: Install MMCV
#        run: |
#          pip install mmcv-full==${{matrix.mmcv}} -f https://download.openmmlab.com/mmcv/dist/cpu/${{matrix.torch_version}}/index.html
#          python -c 'import mmcv; print(mmcv.__version__)'
#      - name: Install unittest dependencies
#        run: |
#          pip install -r requirements.txt
#          pip install -U numpy
#      - name: Build and install
#        run: rm -rf .eggs && pip install -e .
#      - name: Run python unittests and generate coverage report
#        run: |
#          coverage run --branch --source mmdeploy -m pytest -rsE tests
#          coverage xml
#          coverage report -m
#
#  build_cpu_sdk:
#    runs-on: ubuntu-18.04
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#        with:
#          submodules: 'recursive'
#      - name: update
#        run: sudo apt update
#      - name: gcc-multilib
#        run: |
#          sudo apt install gcc-multilib g++-multilib wget libprotobuf-dev protobuf-compiler
#          sudo apt update
#          sudo apt install -y ffmpeg libsm6 libxext6 git ninja-build libglib2.0-0 libxrender-dev libc++1-9 libc++abi1-9
#          sudo add-apt-repository ppa:ignaciovizzo/opencv3-nonfree
#          sudo apt install libopencv-dev lcov wget
#          pkg-config --libs opencv
#      - name: Build and run SDK unit test without backend
#        run: |
#          mkdir -p build && pushd build
#          cmake .. -DCMAKE_CXX_COMPILER=g++-7  -DMMDEPLOY_CODEBASES=all    -DMMDEPLOY_BUILD_SDK=ON     -DMMDEPLOY_BUILD_SDK_PYTHON_API=OFF     -DMMDEPLOY_TARGET_DEVICES=cpu   -DMMDEPLOY_COVERAGE=ON  -DMMDEPLOY_BUILD_TEST=ON
#          make -j2
#          mkdir -p mmdeploy_test_resources/transform
#          cp ../tests/data/tiger.jpeg mmdeploy_test_resources/transform/
#          ./bin/mmdeploy_tests
#          lcov --capture --directory . --output-file coverage.info
#          ls -lah coverage.info
#          cp coverage.info ../
#
#  cross_build_aarch64:
#    runs-on: ubuntu-20.04
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#        with:
#          submodules: 'recursive'
#      - name: update
#        run: sudo apt update
#      - name: Set up Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: 3.8
#      - name: gcc-multilib
#        run: |
#          sh -x tools/scripts/ubuntu_cross_build_aarch64.sh
#
#  build_cuda102:
#    runs-on: ubuntu-18.04
#    container:
#      image: pytorch/pytorch:1.9.0-cuda10.2-cudnn7-devel
#    export:
#      FORCE_CUDA: 1
#    strategy:
#      matrix:
#        python-version: [3.7]
#        torch: [1.9.0+cu102]
#        mmcv: [1.4.2]
#        include:
#          - torch: 1.9.0+cu102
#            torch_version: torch1.9
#            torchvision: 0.10.0+cu102
#    steps:
#      - uses: actions/checkout@v2
#      - name: Set up Python ${{ matrix.python-version }}
#        uses: actions/setup-python@v2
#        with:
#          python-version: ${{ matrix.python-version }}
#      - name: Install system dependencies
#        run: |
#          apt-key adv --keyserver keyserver.ubuntu.com --recv-keys A4B469963BF863CC
#          apt-get update && apt-get install -y ffmpeg libsm6 libxext6 git ninja-build libglib2.0-0 libxrender-dev python${{matrix.python-version}}-dev
#          apt-get clean
#          rm -rf /var/lib/apt/lists/*
#      - name: Install PyTorch
#        run: python -m pip install torch==${{matrix.torch}} torchvision==${{matrix.torchvision}} -f https://download.pytorch.org/whl/torch_stable.html
#      - name: Install dependencies
#        run: |
#          python -V
#          python -m pip install mmcv-full==${{matrix.mmcv}} -f https://download.openmmlab.com/mmcv/dist/cu102/${{matrix.torch_version}}/index.html
#          CFLAGS=`python -c 'import sysconfig;print("-I"+sysconfig.get_paths()["include"])'` python -m pip install -r requirements.txt
#          pip install -U pycuda
#          python -m pip install -U numpy
#      - name: Build and install
#        run: |
#          rm -rf .eggs && python -m pip install -e .
#          python tools/check_env.py
#      - name: Run unittests and generate coverage report
#        run: |
#          coverage run --branch --source mmdeploy -m pytest -rsE tests
#          coverage xml
#          coverage report -m

#  build_cuda113:
#    runs-on: [self-hosted, NVIDIA-3090]
#    container:
#      image: runningleon814/mmdeploy-base:ubuntu20.04-cuda11.3-py3.8-torch1.10-tensorrt8.0.1.6
#      volumes:
#        - /data2/checkpoints:/__w/mmdeploy/mmdeploy_checkpoints
#        - /data2/benchmark:/__w/mmdeploy/data
#      options: "--gpus=all --ipc=host"
#    strategy:
#      matrix:
#        python-version: [3.8]
#        torch: [1.10.0+cu113]
#        mmcv: [1.4.2]
#        include:
#          - torch: 1.10.0+cu113
#            torch_version: torch1.10
#            torchvision: 0.11.0+cu113
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#        with:
#          submodules: recursive
##      - name: Install system dependencies
##        run: |
##          apt-key adv --keyserver keyserver.ubuntu.com --recv-keys A4B469963BF863CC
##          apt-get update && apt-get install -y ffmpeg libsm6 libxext6 git ninja-build libglib2.0-0 libxrender-dev python${{matrix.python-version}}-dev
##          apt-get clean
##          rm -rf /var/lib/apt/lists/*
##      - name: Install PyTorch
##        run: python -m pip install torch==${{matrix.torch}} torchvision==${{matrix.torchvision}} -f https://download.pytorch.org/whl/torch_stable.html
#      - name: Install dependencies
#        run: |
#          python -V
#          python -m pip install opencv-python==4.5.4.60 opencv-python-headless==4.5.4.60 opencv-contrib-python==4.5.4.60
#          python -m pip install openmim
#          python -m mim install 'mmcv-full==1.5.0'
#          python -m pip list
#          CFLAGS=`python -c 'import sysconfig;print("-I"+sysconfig.get_paths()["include"])'` python -m pip install -r requirements.txt
#          python -m pip install -U numpy
#      - name: Build and install
#        run: |
#          rm -rf .eggs && python -m pip install -e .
#          python tools/check_env.py
#      - name: Run unittests and generate coverage report
#        run: |
#          export BACKUP_LD_LIBRARY_PATH=$LD_LIBRARY_PATH
#          export LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real/:$LD_LIBRARY_PATH
#          mkdir -p build && cd build &&\
#          cmake .. \
#              -DMMDEPLOY_BUILD_SDK=ON \
#              -DMMDEPLOY_BUILD_EXAMPLES=ON \
#              -DCMAKE_CXX_COMPILER=g++ \
#              -Dpplcv_DIR=/root/workspace/ppl.cv/cuda-build/install/lib/cmake/ppl \
#              -DTENSORRT_DIR=${TENSORRT_DIR} \
#              -DONNXRUNTIME_DIR=${ONNXRUNTIME_DIR} \
#              -DMMDEPLOY_BUILD_SDK_PYTHON_API=ON \
#              -DMMDEPLOY_TARGET_DEVICES="cuda;cpu" \
#              -DMMDEPLOY_TARGET_BACKENDS="ort;trt" \
#              -DMMDEPLOY_CODEBASES=all &&\
#          make -j$(nproc) && make install &&\
#          export LD_LIBRARY_PATH="/root/workspace/mmdeploy/build/lib:${ONNXRUNTIME_DIR}/lib:${BACKUP_LD_LIBRARY_PATH}"
#          cd ..
#          python tools/check_env.py
#          coverage run --branch --source mmdeploy -m pytest -rsE tests
#          coverage xml
#          coverage report -m
#      - name: Upload coverage to Codecov
#        uses: codecov/codecov-action@v2
#        with:
#          file: ./coverage.xml,./coverage.info
#          flags: unittests
#          env_vars: OS,PYTHON,CPLUS
#          name: codecov-umbrella
#          fail_ci_if_error: false

  build_cuda113-windows:
    runs-on: [self-hosted, win10-3080]
    env:
      CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3
      CUDA_PATH_V11_3: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3
      CUDNN_DIR: C:\DEPS\cudnn\cudnn-11.3-v8.2.1.32
      PPLCV_DIR: C:\DEPS\ppl.cv.cu11
      OPENCV_DIR: C:\DEPS\opencv\4.6.0
      ONNXRUNTIME_DIR: C:\DEPS\onnxruntime-win-x64-1.8.1
      TENSORRT_DIR: C:\DEPS\tensorrt\TensorRT-8.2.3.0.cuda-11.4.cudnn8.2
      CONDA_PY_ENV: D:\actions-runner\_work\_temp\Python
    defaults:
      run:
        shell: pwsh
    strategy:
      matrix:
        python-version: [3.9]
        torch: [1.10.0]
        mmcv: [1.4.2]
        include:
          - torch: 1.10.0
            cuda_version: cu113
            torch_version: torch1.10
            torchvision: 0.11.0
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: Setup Python Environment
        run: |
          conda info
          conda create -p $env:CONDA_PY_ENV --clone cuda11.3-cudnn8.2-py38-torch1.10 -y
          conda activate $env:CONDA_PY_ENV
          $env:path = "$env:CONDA_PY_ENV;$env:CUDNN_DIR\bin;$env:OPENCV_DIR\build\x64\vc15\bin" + $env:path
          python -V
          python -m pip install openmim
          python -m mim install "mmcv-full==${{matrix.mmcv}}"
          python -m pip install -r requirements.txt
          python -m pip list
      - name: Install mmdeploy converter
        run: |
          conda activate $env:CONDA_PY_ENV
          ls $env:CONDA_PY_ENV
          $env:path = "$env:CONDA_PY_ENV;$env:CUDNN_DIR\bin;$env:OPENCV_DIR\build\x64\vc15\bin" + $env:path
          $env:path = "$env:ONNXRUNTIME_DIR\lib;$env:TENSORRT_DIR\bin;$env:TENSORRT_DIR\lib;$pwd\build\install\bin" + $env:path
          echo "--------------------------------------------------"
          echo "env:path=$env:path"
          echo "GITHUB_PATH=$env:GITHUB_PATH"
          echo "--------------------------------------------------"
          python -m pip install -e .
          python .\tools\check_env.py
      - name: Build
        run: |
          # echo "$env:CONDA_PY_ENV" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "--------------------------------------------------"
          echo "PATH=$PATH"
          echo "env:path=$env:path"
          echo "env:PATH=$env:PATH"
          echo "GITHUB_PATH=$env:GITHUB_PATH"
          echo "--------------------------------------------------"
          $env:path = "$env:CONDA_PY_ENV;$env:CUDNN_DIR\bin;$env:OPENCV_DIR\build\x64\vc15\bin" + $env:path
          mkdir build
          cd build
          cmake ..  -A x64 -T v142 `
            -DMMDEPLOY_SHARED_LIBS=OFF `
            -DMMDEPLOY_BUILD_SDK_CXX_API=ON `
            -DMMDEPLOY_BUILD_TEST=ON `
            -DMMDEPLOY_BUILD_SDK_CSHARP_API=ON `
            -DMMDEPLOY_BUILD_SDK_PYTHON_API=ON `
            -DMMDEPLOY_BUILD_SDK=ON `
            -DMMDEPLOY_TARGET_DEVICES='cuda' `
            -DMMDEPLOY_TARGET_BACKENDS='ort;trt' `
            -DMMDEPLOY_CODEBASES='all' `
            -Dpplcv_DIR="$env:PPLCV_DIR\pplcv-build\install\lib\cmake\ppl" `
            -DOpenCV_DIR="$env:OPENCV_DIR\build\x64\vc15\lib" `
            -DTENSORRT_DIR="$env:TENSORRT_DIR" `
            -DONNXRUNTIME_DIR="$env:ONNXRUNTIME_DIR" `
            -DMMDEPLOY_BUILD_EXAMPLES=ON `
            -DCUDNN_DIR="$env:CUDNN_DIR"
          cmake --build . --config Release -- /m
          cmake --install . --config Release
      - name: Run SDK Unittests
        run: |
          $env:path = "$env:CONDA_PY_ENV;$env:CUDNN_DIR\bin;$env:OPENCV_DIR\build\x64\vc15\bin" + $env:path
          $env:path = "$env:ONNXRUNTIME_DIR\lib;$env:TENSORRT_DIR\bin;$env:TENSORRT_DIR\lib;$pwd\build\install\bin" + $env:path

          mkdir mmdeploy_test_resources\transform
          cp .\demo\resources\human-pose.jpg mmdeploy_test_resources\transform
          .\build\bin\Release\mmdeploy_tests.exe
      - name: Install mmdeploy converter
        run: |
          conda activate $env:CONDA_PY_ENV
          $env:path = "$env:CONDA_PY_ENV;$env:CUDNN_DIR\bin;$env:OPENCV_DIR\build\x64\vc15\bin" + $env:path
          $env:path = "$env:ONNXRUNTIME_DIR\lib;$env:TENSORRT_DIR\bin;$env:TENSORRT_DIR\lib;$pwd\build\install\bin" + $env:path

          python -m pip install -e .
          python .\tools\check_env.py
      - name: Run SDK Unittests
        run: |
          conda activate $env:CONDA_PY_ENV
          $env:path = "$env:CONDA_PY_ENV;$env:CONDA_PY_ENV\Scripts;$env:CUDNN_DIR\bin;$env:OPENCV_DIR\build\x64\vc15\bin" + $env:path
          $env:path = "$env:ONNXRUNTIME_DIR\lib;$env:TENSORRT_DIR\bin;$env:TENSORRT_DIR\lib;$pwd\build\install\bin" + $env:path
          echo "--------------------------------------------------"
          echo "PATH=$PATH"
          echo "env:path=$env:path"
          echo "env:PATH=$env:PATH"
          echo "GITHUB_PATH=$env:GITHUB_PATH"
          echo "--------------------- Update env:GITHUB_PATH -----------------------------"
          coverage run --branch --source mmdeploy -m pytest -rsE tests
          coverage xml
          coverage report -m
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          file: ./coverage.xml
          flags: unittests
          env_vars: OS,PYTHON,CPLUS
          name: codecov-umbrella
          fail_ci_if_error: false
      - name: Destroy conda env
        if: success() || failure()
        run: |
          conda env remove -p $env:CONDA_PY_ENV

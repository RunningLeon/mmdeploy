name: build

on:
  push:
    paths-ignore:
      - ".github/scripts/**"
      - "demo/**"
      - "docker/**"
      - "tools/**"

  pull_request:
    paths-ignore:
      - ".github/scripts/**"
      - "demo/**"
      - "docker/**"
      - "tools/**"
      - "docs/**"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_cuda102:
    runs-on: ubuntu-20.04
    container:
      image: pytorch/pytorch:1.9.0-cuda10.2-cudnn7-devel
    env:
      FORCE_CUDA: 1
    strategy:
      matrix:
        torch: [1.9.0+cu102]
        include:
          - torch: 1.9.0+cu102
            torch_version: torch1.9
            torchvision: 0.10.0+cu102
    steps:
      - uses: actions/checkout@v2
      - name: Install system dependencies
        run: |
          apt-key adv --keyserver keyserver.ubuntu.com --recv-keys A4B469963BF863CC
          apt-get update && apt-get install -y ffmpeg libsm6 libxext6 git ninja-build libglib2.0-0 libxrender-dev
          apt-get clean
          rm -rf /var/lib/apt/lists/*
      - name: Install PyTorch
        run: |
          python -V
          python -m pip install --upgrade pip
          python -m pip uninstall torch torchvision -y
          python -m pip install torch==${{matrix.torch}} torchvision==${{matrix.torchvision}} -f https://download.pytorch.org/whl/torch_stable.html
      - name: Install dependencies
        run: |
          python -V
          export CFLAGS=`python -c 'import sysconfig;print("-I"+sysconfig.get_paths()["include"])'`
          python -m pip install openmim
          python -m pip install -r requirements.txt
          python -m pip install -r requirements/backends.txt
          python -m mim install "mmcv>=2.0.0rc1"
          CFLAGS=$CFLAGS python -m mim install -r requirements/codebases.txt
          python -m pip install -U pycuda numpy clip numba transformers
          python -m pip list
      - name: Build and install
        run: |
          rm -rf .eggs && python -m pip install -e .
          python tools/check_env.py
      - name: Run unittests and generate coverage report
        id: badge_status
        run: |
          coverage run --branch --source mmdeploy -m pytest -rsE tests
          coverage xml
          coverage report -m
      - name: create badge
        if: always()
        uses: RubbaBoy/BYOB@v1.2.1
        with:
          NAME: build_cuda102
          LABEL: 'build'
          STATUS: ${{ steps.badge_status.conclusion == 'success' && 'passing' || 'failing' }}
          COLOR: ${{ steps.badge_status.conclusion == 'success' && 'green' || 'red' }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_cuda113:
    runs-on: ubuntu-20.04
    container:
      image: pytorch/pytorch:1.12.0-cuda11.3-cudnn8-devel
    strategy:
      matrix:
        torch: [1.12.0+cu113]
        include:
          - torch: 1.12.0+cu113
            torch_version: torch1.12
            torchvision: 0.13.0+cu113
    steps:
      - uses: actions/checkout@v2
      - name: Install system dependencies
        run: |
          apt-key adv --keyserver keyserver.ubuntu.com --recv-keys A4B469963BF863CC
          apt-get update && apt-get install -y ffmpeg libsm6 libxext6 git ninja-build libglib2.0-0 libxrender-dev
          apt-get clean
          rm -rf /var/lib/apt/lists/*
      - name: Install PyTorch
        run: |
          python -V
          python -m pip install --upgrade pip
          python -m pip show torch torchvision
          python -c 'from torchvision.extension import _assert_has_ops; _assert_has_ops()'
          #python -m pip install torch==${{matrix.torch}} torchvision==${{matrix.torchvision}} -f https://download.pytorch.org/whl/torch_stable.html
      - name: Install dependencies
        run: |
          python -V
          export CFLAGS=`python -c 'import sysconfig;print("-I"+sysconfig.get_paths()["include"])'`
          python -m pip install openmim
          python -m pip install -r requirements.txt
          python -m pip install -r requirements/backends.txt
          python -m mim install "mmcv>=2.0.0rc1"
          python -m mim install -r requirements/codebases.txt
          python -m pip install -U pycuda numpy clip numba transformers
          python -m pip list
      - name: Build and install
        run: |
          rm -rf .eggs && python -m pip install -e .
          python tools/check_env.py
      - name: Run unittests and generate coverage report
        run: |
          coverage run --branch --source mmdeploy -m pytest -rsE tests
          coverage xml
          coverage report -m
      - name: Upload coverage to Codecov
        id: badge_status
        uses: codecov/codecov-action@v2
        with:
          file: ./coverage.xml,./coverage.info
          flags: unittests
          env_vars: OS,PYTHON,CPLUS
          name: codecov-umbrella
          fail_ci_if_error: false
      - name: create badge
        if: always()
        uses: RubbaBoy/BYOB@v1.2.1
        with:
          NAME: build_cuda113
          LABEL: 'build'
          STATUS: ${{ steps.badge_status.conclusion == 'success' && 'passing' || 'failing' }}
          COLOR: ${{ steps.badge_status.conclusion == 'success' && 'green' || 'red' }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
